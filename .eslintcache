[{"C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\reportWebVitals.js":"1","C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\index.tsx":"2","C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\App.tsx":"3","C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\styles\\GlobalStyle.ts":"4","C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\components\\Page\\Home.tsx":"5","C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\components\\Sidebar.tsx":"6","C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\components\\Page\\CharPage.tsx":"7","C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\components\\pageComponents\\SiteUsage.tsx":"8","C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\components\\pageComponents\\Main.tsx":"9","C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\components\\pageComponents\\CommandDescription.tsx":"10","C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\components\\pageComponents\\ContactForm.tsx":"11","C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\components\\pageComponents\\Info.tsx":"12","C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\components\\CharInfo\\ExTabs.tsx":"13","C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\components\\CharInfo\\TabInfo.tsx":"14","C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\components\\CharInfo\\Table.tsx":"15","C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\firebaseInit.tsx":"16","C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\components\\CharInfo\\TableRow.tsx":"17","C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\components\\Page\\Error.tsx":"18","C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\components\\Modal.tsx":"19","C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\Context\\DBContext.tsx":"20","C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\Context\\ModalContext.tsx":"21","C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\styles\\Button.tsx":"22","C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\styles\\customTheme.ts":"23","C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\components\\CharInfo\\TableEdits.tsx":"24","C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\components\\CharInfo\\TableEdit.tsx":"25","C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\hooks\\useInputValue.ts":"26"},{"size":375,"mtime":1619579956583,"results":"27","hashOfConfig":"28"},{"size":1301,"mtime":1625214780632,"results":"29","hashOfConfig":"28"},{"size":3786,"mtime":1625370418648,"results":"30","hashOfConfig":"28"},{"size":207,"mtime":1621134908325,"results":"31","hashOfConfig":"28"},{"size":2820,"mtime":1621135348678,"results":"32","hashOfConfig":"28"},{"size":2042,"mtime":1625125025651,"results":"33","hashOfConfig":"28"},{"size":992,"mtime":1625208598025,"results":"34","hashOfConfig":"28"},{"size":1120,"mtime":1625313778977,"results":"35","hashOfConfig":"28"},{"size":615,"mtime":1624610533605,"results":"36","hashOfConfig":"28"},{"size":1704,"mtime":1621135259135,"results":"37","hashOfConfig":"28"},{"size":1574,"mtime":1625365332444,"results":"38","hashOfConfig":"28"},{"size":4115,"mtime":1624863978354,"results":"39","hashOfConfig":"28"},{"size":3813,"mtime":1625302180515,"results":"40","hashOfConfig":"28"},{"size":698,"mtime":1625122385682,"results":"41","hashOfConfig":"28"},{"size":3664,"mtime":1625367216429,"results":"42","hashOfConfig":"28"},{"size":501,"mtime":1624515459430,"results":"43","hashOfConfig":"28"},{"size":2429,"mtime":1625367376309,"results":"44","hashOfConfig":"28"},{"size":641,"mtime":1625365346628,"results":"45","hashOfConfig":"28"},{"size":3302,"mtime":1625367386043,"results":"46","hashOfConfig":"28"},{"size":5784,"mtime":1625392375492,"results":"47","hashOfConfig":"28"},{"size":2294,"mtime":1625367379802,"results":"48","hashOfConfig":"28"},{"size":707,"mtime":1625291349909,"results":"49","hashOfConfig":"28"},{"size":505,"mtime":1625215251032,"results":"50","hashOfConfig":"28"},{"size":1297,"mtime":1625367181083,"results":"51","hashOfConfig":"28"},{"size":1180,"mtime":1625293192250,"results":"52","hashOfConfig":"28"},{"size":449,"mtime":1625300486285,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"10ijnji",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"59"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"59"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"59"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"59"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"59"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},"C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\reportWebVitals.js",[],["113","114"],"C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\index.tsx",[],["115","116"],"C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\App.tsx",["117","118"],"import styled from 'styled-components';\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport Home from './components/Page/Home';\r\nimport Sidebar from './components/Sidebar';\r\nimport { useState } from 'react';\r\nimport Page from './components/Page/CharPage';\r\nimport React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    faBars,\r\n    faTimes,\r\n    IconDefinition,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport { GlobalStyle } from './styles/GlobalStyle';\r\nimport { AddProperty, StateProvider, useDBData } from './Context/DBContext';\r\nimport Error from './components/Page/Error';\r\nimport Modal from './components/Modal';\r\nimport { useModalData } from './Context/ModalContext';\r\nconst Wrapper = styled.div`\r\n    background: #e8e8e8;\r\n`;\r\n\r\nconst PageContent = styled.div`\r\n    position: absolute;\r\n    height: 100%;\r\n    width: calc(100% - 240px);\r\n    left: 240px;\r\n    background: #808080;\r\n    @media all and (max-width: 1140px) {\r\n        left: 0;\r\n        width: 100%;\r\n    }\r\n`;\r\n\r\ninterface MenuProps {\r\n    onClick: () => void;\r\n    icon: IconDefinition;\r\n}\r\n\r\nconst MenuButtonBlock = styled(FontAwesomeIcon)<MenuProps>`\r\n    position: fixed;\r\n    top: 2.5%;\r\n    left: 20px;\r\n    z-index: 999;\r\n    font-size: 20px;\r\n    color: #fff;\r\n    visibility: hidden;\r\n    @media all and (max-width: 1140px) {\r\n        visibility: visible;\r\n    }\r\n`;\r\n\r\nconst Overlay = styled.div<{ toggle: boolean }>`\r\n    width: 100%;\r\n    position: fixed;\r\n    height: 100%;\r\n    z-index: 996;\r\n    background: rgba(122, 122, 122, 0.5);\r\n    visibility: ${(props) => (props.toggle ? 'visible' : 'hidden')};\r\n`;\r\n\r\nconst CharNames = [\r\n    'Akuma',\r\n    'Alisa',\r\n    'Anna',\r\n    'ArmorKing',\r\n    'Asuka',\r\n    'Bob',\r\n    'Bryan',\r\n    'Cladio',\r\n    'DevilJin',\r\n    'Dragunov',\r\n    'Eddy',\r\n    'Eliza',\r\n    'Feng',\r\n    'Geese',\r\n    'Gigas',\r\n    'Heihachi',\r\n    'Hworang',\r\n    'Jack7',\r\n    'Jin',\r\n    'Josie',\r\n    'Julia',\r\n    'Katarina',\r\n    'Kazumi',\r\n    'Kazuya',\r\n    'King',\r\n    'Kuma',\r\n    'Kunimitsu',\r\n    'Lars',\r\n    'Law',\r\n    'Lee',\r\n    'Lei',\r\n    'Leo',\r\n    'Lidia',\r\n    'Lili',\r\n    'Lucky',\r\n    'Marduk',\r\n    'MasterRaven',\r\n    'Miguel',\r\n    'Negan',\r\n    'Nina',\r\n    'Noctis',\r\n    'Paul',\r\n    'Shaheen',\r\n    'Steve',\r\n    'Xiaoyu',\r\n    'Yoshimitsu',\r\n];\r\n\r\nfunction App() {\r\n    const [toggle, setToggle] = useState(false);\r\n    const { loading, error } = useDBData();\r\n    const { open } = useModalData();\r\n\r\n    return (\r\n        <>\r\n            <title>Tekken_info 0.1.0</title>\r\n            <GlobalStyle />\r\n            <Wrapper>\r\n                <MenuButtonBlock\r\n                    icon={toggle ? faTimes : faBars}\r\n                    onClick={() => {\r\n                        setToggle(!toggle);\r\n                    }}\r\n                />\r\n                <Sidebar toggle={toggle} Data={CharNames} />\r\n                <Overlay\r\n                    toggle={toggle}\r\n                    onClick={() => {\r\n                        setToggle(!toggle);\r\n                    }}\r\n                />\r\n\r\n                <PageContent>\r\n                    <button onClick={AddProperty}>안녕</button>\r\n\r\n                    <Switch>\r\n                        <Route path=\"/\" exact={true} component={Home} />\r\n\r\n                        <Route path=\"/data/:char\" exact={true}>\r\n                            {error ? <Redirect to=\"/404\" /> : <Page />}\r\n                        </Route>\r\n                        <Route path=\"/404\" exact={true}>\r\n                            <Error />\r\n                        </Route>\r\n                    </Switch>\r\n                </PageContent>\r\n                {open && <Modal />}\r\n            </Wrapper>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\styles\\GlobalStyle.ts",[],"C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\components\\Page\\Home.tsx",[],"C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\components\\Sidebar.tsx",[],"C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\components\\Page\\CharPage.tsx",["119"],"import React, { useEffect } from 'react';\r\nimport Info from '../pageComponents/Info';\r\nimport Main from '../pageComponents/Main';\r\nimport styled from 'styled-components';\r\nimport { useParams } from 'react-router';\r\nimport { LoadData, useDBData, useDBDispatch } from '../../Context/DBContext';\r\n\r\nconst CharWrap = styled.div`\r\n    display: flex;\r\n    width: 100%;\r\n    height: 100%;\r\n    justify-content: center;\r\n    align-items: center;\r\n    @media all and (max-width: 1140px) {\r\n        flex-direction: column;\r\n    }\r\n`;\r\n\r\nconst Page = () => {\r\n    let { char }: { char: string } = useParams();\r\n    const charName = char.substring(1);\r\n    const tempdata = useDBData().charProps;\r\n    const tempDispatch = useDBDispatch();\r\n    useEffect(() => {\r\n        LoadData(charName, tempDispatch);\r\n    }, [charName]);\r\n\r\n    return (\r\n        <CharWrap>\r\n            <Info data={tempdata?.Info} />\r\n            <Main data={tempdata!} />\r\n        </CharWrap>\r\n    );\r\n};\r\n\r\nexport default Page;\r\n","C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\components\\pageComponents\\SiteUsage.tsx",[],"C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\components\\pageComponents\\Main.tsx",[],"C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\components\\pageComponents\\CommandDescription.tsx",[],"C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\components\\pageComponents\\ContactForm.tsx",[],"C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\components\\pageComponents\\Info.tsx",[],"C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\components\\CharInfo\\ExTabs.tsx",[],"C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\components\\CharInfo\\TabInfo.tsx",[],"C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\components\\CharInfo\\Table.tsx",["120","121","122","123","124"],"import React, { useCallback, useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { TableItemProps } from './TabInfo';\r\nimport TableRowData from './TableRow';\r\nimport { useParams } from 'react-router';\r\nimport { AddData, tempta, useDBDispatch } from '../../Context/DBContext';\r\nimport TableEdits from './TableEdits';\r\nimport useEditValue from '../../hooks/useInputValue';\r\n\r\nconst TableContent = styled.table`\r\n    width: 90%;\r\n    border-collapse: collapse;\r\n    border-radius: 10px;\r\n    margin: 0 auto;\r\n    margin-bottom: 20px;\r\n`;\r\n\r\nconst TableHead = styled.th`\r\n    text-align: left;\r\n    padding: 5px;\r\n    border-collapse: collapse;\r\n`;\r\nconst TableRow = styled.tr`\r\n    margin-bottom: -1px;\r\n    border: 1px solid ${(props) => props.theme.palette.border_1};\r\n\r\n    box-sizing: border-box;\r\n    &:hover {\r\n        background: #efefef;\r\n    }\r\n`;\r\nexport const TableControl = styled.td`\r\n    width: 30px;\r\n    text-align: center;\r\n`;\r\nconst TableAdd = styled.tr`\r\n    border: none;\r\n    width: 100%;\r\n    td {\r\n        text-align: center;\r\n    }\r\n`;\r\n\r\ninterface dataProps {\r\n    item: TableItemProps;\r\n}\r\n\r\nexport interface tagProperty {\r\n    command?: string;\r\n    frame?: string;\r\n    damage?: string;\r\n    way?: string;\r\n    state?: string;\r\n    range?: string;\r\n    description?: string;\r\n}\r\n\r\nconst Table = ({ item }: dataProps) => {\r\n    const { header, columns, data, tag } = item;\r\n\r\n    const initialValue: tagProperty = tag.detail.reduce(\r\n        (acc: any, cur) => ((acc[cur] = ''), acc),\r\n        {}\r\n    );\r\n\r\n    const [edit, setEdit] = useState(false);\r\n    const { values, handleChange } = useEditValue(initialValue);\r\n\r\n    let { char }: { char: string } = useParams();\r\n    const charName = char.substring(1);\r\n    const colSpan = tag.detail.length;\r\n    const dispatch = useDBDispatch();\r\n\r\n    const modalProps = {\r\n        action: 'ADD',\r\n        props: {\r\n            description: tag.description,\r\n            values: values,\r\n            charName: charName,\r\n        },\r\n    };\r\n    return (\r\n        <>\r\n            <h2>{header}</h2>\r\n            <TableContent>\r\n                <thead>\r\n                    <TableRow>\r\n                        {columns.map((column, index) => (\r\n                            <TableHead key={header + index + column}>\r\n                                {column}\r\n                            </TableHead>\r\n                        ))}\r\n                    </TableRow>\r\n                </thead>\r\n                <tbody>\r\n                    {data.map((row: any, index: number) => (\r\n                        <TableRowData\r\n                            key={index}\r\n                            row={row}\r\n                            charName={charName}\r\n                            tag={tag.description}\r\n                            dispatch={dispatch}\r\n                        />\r\n                    ))}\r\n                    {edit ? (\r\n                        <TableRow>\r\n                            <TableEdits\r\n                                setEdit={setEdit}\r\n                                values={values}\r\n                                handleChange={handleChange}\r\n                                charName={charName}\r\n                                modalProps={modalProps}\r\n                            />\r\n                        </TableRow>\r\n                    ) : (\r\n                        <TableAdd onClick={() => setEdit(true)}>\r\n                            <td colSpan={colSpan}>+</td>\r\n                        </TableAdd>\r\n                    )}\r\n                </tbody>\r\n            </TableContent>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Table;\r\n","C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\firebaseInit.tsx",[],"C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\components\\CharInfo\\TableRow.tsx",["125","126","127"],"import React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { DeleteData, EditData } from '../../Context/DBContext';\r\nimport { useModalDispatch } from '../../Context/ModalContext';\r\nimport useEditValue from '../../hooks/useInputValue';\r\nimport { tagProperty } from './Table';\r\nimport TableEdits from './TableEdits';\r\nconst TableRow = styled.tr`\r\n    margin-bottom: -1px;\r\n    border-bottom: 1px solid #d1d1d1;\r\n    box-sizing: border-box;\r\n    &:hover {\r\n        background: #efefef;\r\n    }\r\n`;\r\nconst TableData = styled.td`\r\n    border-collapse: collapse;\r\n    padding: 10px 5px;\r\n`;\r\nconst TableControl = styled.td`\r\n    width: 30px;\r\n    text-align: center;\r\n`;\r\n\r\ninterface RowProps {\r\n    row: tagProperty;\r\n    charName: string;\r\n    tag: string;\r\n    dispatch: React.Dispatch<any>;\r\n}\r\n\r\nconst TableRowData = ({ row, charName, tag, dispatch }: RowProps) => {\r\n    const [edit, setEdit] = useState(false);\r\n    const { values, handleChange, setValue } = useEditValue(row);\r\n\r\n    useEffect(() => {\r\n        setValue(row);\r\n        setEdit(false);\r\n    }, [row]);\r\n\r\n    const modalProps = {\r\n        action: 'EDIT',\r\n        props: {\r\n            description: tag,\r\n            oldvalues: row,\r\n            values: values,\r\n            charName: charName,\r\n        },\r\n    };\r\n    const modalDispatch = useModalDispatch();\r\n    const handleModal = () => {\r\n        const { props } = modalProps;\r\n        modalDispatch({ type: 'DELETE', payload: props });\r\n        setEdit(false);\r\n    };\r\n\r\n    return (\r\n        <TableRow>\r\n            {edit ? (\r\n                <>\r\n                    <TableEdits\r\n                        setEdit={setEdit}\r\n                        values={values}\r\n                        handleChange={handleChange}\r\n                        charName={charName}\r\n                        modalProps={modalProps}\r\n                    />\r\n                </>\r\n            ) : (\r\n                <>\r\n                    {Object.values(row).map((content: any, i) => (\r\n                        <TableData key={i}>{content}</TableData>\r\n                    ))}\r\n                    <TableControl onClick={handleModal}>R</TableControl>\r\n                    <TableControl onClick={() => setEdit(!edit)}>\r\n                        E\r\n                    </TableControl>\r\n                </>\r\n            )}\r\n        </TableRow>\r\n    );\r\n};\r\n\r\nexport default TableRowData;\r\n","C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\components\\Page\\Error.tsx",[],"C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\components\\Modal.tsx",[],"C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\Context\\DBContext.tsx",["128"],"C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\Context\\ModalContext.tsx",[],"C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\styles\\Button.tsx",[],"C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\styles\\customTheme.ts",[],"C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\components\\CharInfo\\TableEdits.tsx",["129"],"import React from 'react';\r\nimport {\r\n    Action,\r\n    ParaProps,\r\n    useModalDispatch,\r\n} from '../../Context/ModalContext';\r\nimport { TableControl } from './Table';\r\nimport TableEdit from './TableEdit';\r\n\r\ninterface Props {\r\n    values: Object;\r\n    charName: string;\r\n    handleChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\r\n    setEdit: (open: boolean) => void;\r\n    modalProps: {\r\n        action: any;\r\n        props: ParaProps;\r\n    };\r\n}\r\n\r\nconst TableEdits = ({\r\n    values,\r\n    charName,\r\n    handleChange,\r\n    setEdit,\r\n    modalProps,\r\n}: Props) => {\r\n    const dispatch = useModalDispatch();\r\n    const handleModal = () => {\r\n        const { action, props } = modalProps;\r\n        dispatch({ type: action, payload: props });\r\n        setEdit(false);\r\n    };\r\n    return (\r\n        <>\r\n            {Object.entries(values).map(([key, value]) => (\r\n                <TableEdit\r\n                    value={value}\r\n                    name={key}\r\n                    key={key + charName}\r\n                    handleChange={handleChange}\r\n                />\r\n            ))}\r\n\r\n            <TableControl onClick={handleModal}>Y</TableControl>\r\n            <TableControl onClick={() => setEdit(false)}>N</TableControl>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TableEdits;\r\n","C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\components\\CharInfo\\TableEdit.tsx",[],"C:\\Users\\kkkk\\Documents\\GitHub\\Made\\tekken_react\\src\\hooks\\useInputValue.ts",[],{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":15,"column":23,"nodeType":"136","messageId":"137","endLine":15,"endColumn":36},{"ruleId":"134","severity":1,"message":"138","line":113,"column":13,"nodeType":"136","messageId":"137","endLine":113,"endColumn":20},{"ruleId":"139","severity":1,"message":"140","line":26,"column":8,"nodeType":"141","endLine":26,"endColumn":18,"suggestions":"142"},{"ruleId":"134","severity":1,"message":"143","line":1,"column":17,"nodeType":"136","messageId":"137","endLine":1,"endColumn":28},{"ruleId":"134","severity":1,"message":"144","line":1,"column":30,"nodeType":"136","messageId":"137","endLine":1,"endColumn":39},{"ruleId":"134","severity":1,"message":"145","line":7,"column":10,"nodeType":"136","messageId":"137","endLine":7,"endColumn":17},{"ruleId":"134","severity":1,"message":"146","line":7,"column":19,"nodeType":"136","messageId":"137","endLine":7,"endColumn":25},{"ruleId":"147","severity":1,"message":"148","line":63,"column":44,"nodeType":"149","messageId":"150","endLine":63,"endColumn":45},{"ruleId":"134","severity":1,"message":"151","line":3,"column":10,"nodeType":"136","messageId":"137","endLine":3,"endColumn":20},{"ruleId":"134","severity":1,"message":"152","line":3,"column":22,"nodeType":"136","messageId":"137","endLine":3,"endColumn":30},{"ruleId":"139","severity":1,"message":"153","line":39,"column":8,"nodeType":"141","endLine":39,"endColumn":13,"suggestions":"154"},{"ruleId":"134","severity":1,"message":"155","line":3,"column":10,"nodeType":"136","messageId":"137","endLine":3,"endColumn":24},{"ruleId":"134","severity":1,"message":"156","line":3,"column":5,"nodeType":"136","messageId":"137","endLine":3,"endColumn":11},"no-native-reassign",["157"],"no-negated-in-lhs",["158"],"@typescript-eslint/no-unused-vars","'StateProvider' is defined but never used.","Identifier","unusedVar","'loading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'tempDispatch'. Either include it or remove the dependency array.","ArrayExpression",["159"],"'useCallback' is defined but never used.","'useEffect' is defined but never used.","'AddData' is defined but never used.","'tempta' is defined but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'DeleteData' is defined but never used.","'EditData' is defined but never used.","React Hook useEffect has a missing dependency: 'setValue'. Either include it or remove the dependency array.",["160"],"'updateProperty' is defined but never used.","'Action' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},"Update the dependencies array to be: [charName, tempDispatch]",{"range":"165","text":"166"},"Update the dependencies array to be: [row, setValue]",{"range":"167","text":"168"},[802,812],"[charName, tempDispatch]",[1102,1107],"[row, setValue]"]